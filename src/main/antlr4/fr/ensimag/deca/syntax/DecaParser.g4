parser grammar DecaParser;

options {
    // Default language but name it anyway
    //
    language  = Java;

    // Use a superclass to implement all helper
    // methods, instance variables and overrides
    // of ANTLR default methods, such as error
    // handling.
    //
    superClass = AbstractDecaParser;

    // Use the vocabulary generated by the accompanying
    // lexer. Maven knows how to work out the relationship
    // between the lexer and parser and will build the
    // lexer before the parser. It will also rebuild the
    // parser if the lexer changes.
    //
    tokenVocab = DecaLexer;

}

// which packages should be imported?
@header {
    import fr.ensimag.deca.tree.*;
    import java.io.PrintStream;
    import fr.ensimag.deca.tools.SymbolTable;
    import fr.ensimag.deca.tools.SymbolTable.Symbol;
}

@members {
    @Override
    protected AbstractProgram parseProgram() {
        return prog().tree;
    }
}

prog returns[AbstractProgram tree]
    : list_classes main EOF {
            assert($list_classes.tree != null);
            assert($main.tree != null);
            $tree = new Program($list_classes.tree, $main.tree);
            setLocation($tree, $list_classes.start);
        }
    ;

main returns[AbstractMain tree]
    : block {
            assert($block.decls != null);
            assert($block.insts != null);
            $tree = new Main($block.decls, $block.insts);
            setLocation($tree, $block.start);
        }
    | /* epsilon */ {
            $tree = new EmptyMain();
        }
    ;

block returns[ListDeclVar decls, ListInst insts]
    : OBRACE list_decl list_inst CBRACE {
            assert($list_decl.tree != null);
            assert($list_inst.tree != null);
            $decls = $list_decl.tree;
            $insts = $list_inst.tree;
        }
    ;

list_decl returns[ListDeclVar tree]
@init   {
            $tree = new ListDeclVar();
        }
    : (decl_var_set[$tree])*
    ;

decl_var_set[ListDeclVar l]
    : type list_decl_var[$l,$type.tree] SEMI
    ;

list_decl_var[ListDeclVar l, AbstractIdentifier t]
    : dv1=decl_var[$t] {
        $l.add($dv1.tree);
        } (COMMA dv2=decl_var[$t] {
        $l.add($dv2.tree);
        }
      )*
    ;

decl_var[AbstractIdentifier t] returns[AbstractDeclVar tree]
@init   {AbstractInitialization init_val = new NoInitialization();}
    : i=ident {}
      (EQUALS e=expr {
            init_val = new Initialization($e.tree);
            setLocation(init_val, $EQUALS);
        }
      )? {
            $tree = new DeclVar($t, $i.tree, init_val);
            setLocation($tree, $i.start);
        }
    ;

list_inst returns[ListInst tree]
@init { $tree = new ListInst(); }
    : (inst { $tree.add($inst.tree);
    }
      )*
    ;

inst returns[AbstractInst tree]
    : e1=expr SEMI {
            assert($e1.tree != null);
            $tree = $e1.tree;
        }
    | SEMI {
           $tree = new NoOperation();
           setLocation($tree, $SEMI);
        }
    | PRINT OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Print(false, $list_expr.tree);
            setLocation($tree, $PRINT);
        }
    | PRINTLN OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Println(false, $list_expr.tree);
            setLocation($tree, $PRINTLN);
        }
    | PRINTX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Print(true, $list_expr.tree);
            setLocation($tree, $PRINTX);
        }
    | PRINTLNX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Println(true, $list_expr.tree);
            setLocation($tree, $PRINTLNX);
        }
    | if_then_else {
            assert($if_then_else.tree != null);
            $tree = $if_then_else.tree;
        }
    | WHILE OPARENT condition=expr CPARENT OBRACE body=list_inst CBRACE {
            assert($condition.tree != null);
            assert($body.tree != null);
            $tree = new While($condition.tree, $body.tree);
            setLocation($tree, $condition.start);
        }
    | RETURN expr SEMI {
            assert($expr.tree != null);
            $tree = new Return($expr.tree);
            setLocation($tree, $RETURN);
        }
    ;

if_then_else returns[IfThenElse tree]
@init {IfThenElse newIf;
}
    : if1=IF OPARENT condition=expr CPARENT OBRACE li_if=list_inst CBRACE {
        $tree = new IfThenElse($condition.tree, $li_if.tree, new ListInst());
        setLocation($tree, $condition.start);
        IfThenElse lastIf = $tree;
      }
      (ELSE elsif=IF OPARENT elsif_cond=expr CPARENT OBRACE elsif_li=list_inst CBRACE {
            newIf = new IfThenElse($elsif_cond.tree, $elsif_li.tree, new ListInst());
            setLocation(newIf, $elsif);
            lastIf.getElseBranch().add(newIf);
            lastIf = newIf;
      }
      )*
      (ELSE OBRACE li_else=list_inst CBRACE {
            lastIf.setElseBranch($li_else.tree);
        }
      )?
    ;

list_expr returns[ListExpr tree]
@init   { $tree = new ListExpr();
        }
    : (e1=expr { $tree.add($e1.tree);
        }
       (COMMA e2=expr { $tree.add($e2.tree);
        }
       )* )?
    ;

expr returns[AbstractExpr tree]
    : assign_expr {
            assert($assign_expr.tree != null);
            $tree = $assign_expr.tree;
        }
    ;

assign_expr returns[AbstractExpr tree]
    : e=or_expr (
        /* condition: expression e must be a "LVALUE" */ {
            if (! ($e.tree instanceof AbstractLValue)) {
                throw new InvalidLValue(this, $ctx);
            }
        }
        EQUALS e2=assign_expr {
            assert($e.tree != null);
            assert($e2.tree != null);
            $tree = new Assign((AbstractLValue)$e.tree, $e2.tree);
            setLocation($tree, $EQUALS);
        }
      | /* epsilon */ {
            assert($e.tree != null);
            $tree = $e.tree;
        }
      )
    ;

or_expr returns[AbstractExpr tree]
    : e=and_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=or_expr OR e2=and_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Or($e1.tree, $e2.tree);
            setLocation($tree, $OR);
       }
    ;

and_expr returns[AbstractExpr tree]
    : e=eq_neq_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    |  e1=and_expr AND e2=eq_neq_expr {
            assert($e1.tree != null);                         
            assert($e2.tree != null);
            $tree = new And($e1.tree, $e2.tree);
            setLocation($tree, $AND);
        }
    ;

eq_neq_expr returns[AbstractExpr tree]
    : e=inequality_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=eq_neq_expr EQEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Equals($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=eq_neq_expr NEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new NotEquals($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    ;

inequality_expr returns[AbstractExpr tree]
    : e=sum_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=inequality_expr LEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new LowerOrEqual($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr GEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new GreaterOrEqual($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr GT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Greater($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr LT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Lower($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr INSTANCEOF type {
            assert($e1.tree != null);
            assert($type.tree != null);
            $tree = new InstanceOf($e1.tree, $type.tree);
            setLocation($tree, $INSTANCEOF);
        }
    ;


sum_expr returns[AbstractExpr tree]
    : e=mult_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=sum_expr PLUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Plus($e1.tree, $e2.tree);
            setLocation($tree, $PLUS);
        }
    | e1=sum_expr MINUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Minus($e1.tree, $e2.tree);
            setLocation($tree, $MINUS);
        }
    ;

mult_expr returns[AbstractExpr tree]
    : e=unary_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=mult_expr TIMES e2=unary_expr {
            assert($e1.tree != null);                                         
            assert($e2.tree != null);
            $tree = new Multiply($e1.tree, $e2.tree);
            setLocation($tree, $TIMES);

        }
    | e1=mult_expr SLASH e2=unary_expr {
            assert($e1.tree != null);                                         
            assert($e2.tree != null);
            $tree = new Divide($e1.tree, $e2.tree);
            setLocation($tree, $SLASH);
        }
    | e1=mult_expr PERCENT e2=unary_expr {
            assert($e1.tree != null);                                                                          
            assert($e2.tree != null);
            $tree = new Modulo($e1.tree, $e2.tree);
            setLocation($tree, $PERCENT);
        }
    ;

unary_expr returns[AbstractExpr tree]
    : op=MINUS e=unary_expr {
            assert($e.tree != null);
            $tree = new UnaryMinus($e.tree);
            setLocation($tree, $op);
        }
    | op=EXCLAM e=unary_expr {
            assert($e.tree != null);
            $tree = new Not($e.tree);
            setLocation($tree, $op);
        }
    | select_expr {
            assert($select_expr.tree != null);
            $tree = $select_expr.tree;
        }
    ;

select_expr returns[AbstractExpr tree]
    : e=primary_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=select_expr DOT i=ident {
            assert($e1.tree != null);
            assert($i.tree != null);
        }
        (o=OPARENT args=list_expr CPARENT {
            // we matched "e1.i(args)"
            assert($args.tree != null);
            $tree = new MethodCall($e1.tree, $i.tree, $args.tree);
            setLocation($tree, $o);
        }
        | /* epsilon */ {
            // we matched "e.i"
            $tree = new FieldSelection($e1.tree, $i.tree);
            setLocation($tree, $DOT);
        }
        )
    ;

primary_expr returns[AbstractExpr tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
        }
    | m=ident OPARENT args=list_expr CPARENT {
            assert($args.tree != null);
            assert($m.tree != null);
            This oui = new This();
            setLocation(oui, $m.start);
            $tree = new MethodCall(oui, $m.tree, $args.tree);
            setLocation($tree, $m.start);
        }
    | OPARENT expr CPARENT {
            assert($expr.tree != null);
            $tree = $expr.tree;
        }
    | READINT OPARENT CPARENT {
        $tree = new ReadInt();
        setLocation($tree, $READINT);
        }
    | READFLOAT OPARENT CPARENT {
        $tree = new ReadFloat();
        setLocation($tree, $READFLOAT);
        }
    | NEW ident OPARENT CPARENT {
            assert($ident.tree != null);
            $tree = new New($ident.tree);
            setLocation($tree, $NEW);
        }
    | cast=OPARENT type CPARENT OPARENT expr CPARENT {
            assert($type.tree != null);
            assert($expr.tree != null);
            $tree = new Cast($type.tree, $expr.tree);
            setLocation($tree, $cast);

        }
    | literal {
            assert($literal.tree != null);
            $tree = $literal.tree;
        }
    ;

type returns[AbstractIdentifier tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
        }
    ;

literal returns[AbstractExpr tree]
    : INT {
        try {
            $tree = new IntLiteral(Integer.parseInt($INT.text));
            setLocation($tree, $INT);
        } catch (NumberFormatException e) {
            throw new DecaRecognitionException("litteral int value cannot be represented on 32 bits", this, $INT);
        }
    }
    | fd=FLOAT {
        try {
            float value = Float.parseFloat($fd.text);
            //the regex below matches any float which value is 0 (with any exponent/sign etc)
            if (value != 0.0 || ($fd.text.matches("([(0x)(0X)])?0+\\.0+([eEpP][+-]?[0-9]*)?(fF)?"))) {
                //real value is not 0, or is 0 and converted to 0.0f
                $tree = new FloatLiteral(value);
                setLocation($tree, $fd);
            } else {
                //real value is not 0 (does not match the float 0 regex) but converted to 0
                throw new DecaRecognitionException("float literal too close to 0 while not being 0", this, $fd);
            }
        } catch (IllegalArgumentException e) {
            if (e.getMessage().equals("literal values cannot be infinite")) {
                throw new DecaRecognitionException("literal values cannot be infinite", this, $fd);
            } else {
                throw new DecaRecognitionException("literal value cannot be NaN", this, $fd);
            }
        }
    }
    | STRING { $tree = new StringLiteral($STRING.text);
            setLocation($tree, $STRING);
        }
    | TRUE {
        $tree = new BooleanLiteral(true);
        setLocation($tree, $TRUE);
        }
    | FALSE {
        $tree = new BooleanLiteral(false);
        setLocation($tree, $FALSE);
        }
    | THIS {
        $tree = new This();
        setLocation($tree, $THIS);
        }
    | NULL {
        $tree = new Null();
        setLocation($tree, $NULL);
        }
    ;

ident returns[AbstractIdentifier tree]
    : IDENT {
            SymbolTable table = this.getDecacCompiler().getSymbolTable();
            Symbol symb = table.create($IDENT.text);
            $tree = new Identifier(symb);
            setLocation($tree, $IDENT);
        }
    ;

/****     Class related rules     ****/

list_classes returns[ListDeclClass tree]
@init {$tree = new ListDeclClass();
        }
    : (c1=class_decl {
            $tree.add($class_decl.tree);
        }
      )*
    ;

class_decl returns[DeclClass tree]
    : CLASS name=ident superclass=class_extension OBRACE class_body CBRACE {
        $tree = new DeclClass($name.tree, $superclass.tree, $class_body.treeMet, $class_body.treeSet);
        setLocation($tree, $CLASS);
        }
    ;

class_extension returns[AbstractIdentifier tree]
    : EXTENDS ident {
        $tree = $ident.tree;
        }
    | /* epsilon */ {
        // need to create object ?
        SymbolTable table = this.getDecacCompiler().getSymbolTable();
        Symbol symb = table.create("Object");
        $tree = new Identifier(symb);
//        $tree.setDefinition(this.getDecacCompiler().getEnvTypes().get(symb));
        setLocationBUILTIN($tree);
        }
    ;

class_body returns[ListDeclMethod treeMet, ListDeclField treeSet]
@init{$treeMet = new ListDeclMethod();
        $treeSet = new ListDeclField();}
    : (m=decl_method {
        $treeMet.add($m.tree);
        }
      | decl_field_set[$treeSet]
      )*
    ;

decl_field_set [ListDeclField l]
    : v=visibility t=type list_decl_field[$v.tree, $t.tree, $l]
      SEMI
    ;

visibility returns[Visibility tree]
    : /* epsilon */ {
            $tree = Visibility.PUBLIC;
        }
    | PROTECTED {
            $tree = Visibility.PROTECTED;
        }
    ;

list_decl_field[Visibility v, AbstractIdentifier t, ListDeclField l]
    : dv1=decl_field[$v, $t] {$l.add($dv1.tree);}
        (COMMA dv2=decl_field[$v, $t] {$l.add($dv2.tree); }
      )*
    ;

decl_field[Visibility v, AbstractIdentifier t] returns [DeclField tree]
    : i=ident { AbstractInitialization init_val = new NoInitialization(); }
      (EQUALS e=expr {
            init_val = new Initialization($e.tree);
            setLocation(init_val, $EQUALS);
      }
      )? {
            $tree = new DeclField($v, $t, $i.tree, init_val);
            setLocation($tree, $i.start);
        }
    ;

decl_method returns[DeclMethod tree]
@init { AbstractMethodBody body; }
    : type ident OPARENT params=list_params CPARENT (
        block {
            body = new DecaMethodBody($block.decls, $block.insts);
            setLocation(body, $block.start);
            }
        | ASM OPARENT code=multi_line_string CPARENT SEMI {
            StringLiteral stringlit = new StringLiteral($code.text);
            setLocation(stringlit, $code.location);
            body = new AsmMethodBody(stringlit);
            setLocation(body, $code.location);
            }
      )
      {
      $tree = new DeclMethod($type.tree, $ident.tree, $params.tree, body);
      setLocation($tree, $type.start);}
    ;

list_params returns [ListDeclParam tree]
@init{ $tree = new ListDeclParam(); }
    : (p1=param { $tree.add($p1.tree);
        } (COMMA p2=param { $tree.add($p2.tree);
        }
      )*)?
    ;
    
multi_line_string returns[String text, Location location]
    : s=STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    | s=MULTI_LINE_STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    ;

param returns[DeclParam tree]
    : type ident {
            $tree = new DeclParam($type.tree, $ident.tree);
            setLocation($tree, $type.start);
        }
    ;
