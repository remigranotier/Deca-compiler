; ADDSP : method table size : 5, nb of var 1
	ADDSP #6
; start main program
; Generation of the method table of Object
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD Code.Object.equals, R0
	STORE R0, 2(GB)
; Generation of the method table of : Point
	LEA 1(GB), R0
	STORE R0, 3(GB)
	LOAD Code.Object.equals, R0
	STORE R0, 4(GB)
	LOAD Code.Point.move, R0
	STORE R0, 5(GB)
; Main program
; Global variables initialization
	NEW #3, R2
	BOV heapFull
	LEA 3(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Point
	POP R2
	STORE R2, 6(GB)
; Beginning of main instructions:
	LOAD 6(GB), R2
; Beginning of a method call : method at index 1 ; with 0 params.
	ADDSP #1
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #1
	LOAD 6(GB), R2
	LOAD 1(R2), R1
	WINT
	WNL
	LOAD 6(GB), R2
	LOAD 2(R2), R1
	WINT
	WNL
	HALT
init.object:
	RTS
init.Point:
; save registers
; initialization of own fields
; Initialization of field x
	LOAD -2(LB), R1
	LOAD #0, R0
	STORE R0, 1(R1)
; Initialization of field y
	LOAD -2(LB), R1
	LOAD #0, R0
	STORE R0, 2(R1)
; restore registers
	RTS
Code.Object.equals:
	LOAD -2(LB), R0
	LOAD -3(LB), R1
	CMP R0, R1
	SEQ R0
	RTS
code.Point.move:
; save registers
	PUSH R3
	PUSH R2
	LOAD -2(LB), R2
	LOAD 1(R2), R2
	ADD #1, R2
	LOAD -2(LB), R3
	STORE R2, 1(R3)
	LOAD -2(LB), R2
	LOAD 2(R2), R2
	ADD #1, R2
	LOAD -2(LB), R3
	STORE R2, 2(R3)
fin.Point.move:
; restore registers
	POP R2
	POP R3
	RTS
heapFull:
	WSTR "ERROR : allocation failed because of full heap"
	WNL
	ERROR
; end main program
