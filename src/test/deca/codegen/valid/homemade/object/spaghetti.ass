	TSTO #14	; Max nb of stored register : 6 , ADDSP : 8
	BOV stackOverflow
; ADDSP : method table size : 6, nb of var 2
	ADDSP #8
; start main program
; Generation of the method table of Object
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD Code.Object.equals, R0
	STORE R0, 2(GB)
; Generation of the method table of : A
	LEA 1(GB), R0
	STORE R0, 3(GB)
	LOAD Code.Object.equals, R0
	STORE R0, 4(GB)
	LOAD Code.A.move, R0
	STORE R0, 5(GB)
	LOAD Code.A.meh, R0
	STORE R0, 6(GB)
; Main program
; Global variables initialization
	NEW #2, R2
	BOV heapFull
	LEA 3(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.A
	POP R2
	STORE R2, 7(GB)
	NEW #2, R2
	BOV heapFull
	LEA 3(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.A
	POP R2
	STORE R2, 8(GB)
; Beginning of main instructions:
	LOAD 7(GB), R2
	CMP #null, R2
	BEQ nullDereferencement
; Beginning of a method call : method at index 1 ; with 1 params.
	ADDSP #2
	STORE R2, 0(SP)
	LOAD #2, R2
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ nullDereferencement
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #2
; Beginning of a new If statement
; Beginning of a comparison in a control flow
	LOAD 7(GB), R2
	CMP #null, R2
	BEQ nullDereferencement
	LOAD 1(R2), R2
	CMP #41, R2
	BNE Else0
	WSTR "ok 1 / 2"
	WNL
	BRA EndIf0
Else0:
EndIf0:
	LOAD 7(GB), R2
	CMP #null, R2
	BEQ nullDereferencement
; Beginning of a method call : method at index 2 ; with 1 params.
	ADDSP #2
	STORE R2, 0(SP)
	LOAD 8(GB), R2
	CMP #null, R2
	BEQ nullDereferencement
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ nullDereferencement
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #2
	HALT
init.object:
	RTS
init.A:
; Nothing stacked : can't have a stack overflow
; save registers
; initialization of own fields
; Initialization of field a
	LOAD -2(LB), R1
	LOAD #35, R0
	STORE R0, 1(R1)
; restore registers
	RTS
Code.Object.equals:
	LOAD -2(LB), R0
	LOAD -3(LB), R1
	CMP R0, R1
	SEQ R0
	RTS
code.A.move:
	TSTO #2	; Max nb of stored register : 2 , ADDSP : 0
	BOV stackOverflow
; save registers
	PUSH R3
	PUSH R2
	LOAD -2(LB), R2
	LOAD 1(R2), R2
	LOAD #3, R3
	PUSH R3
	LOAD -3(LB), R3
	LOAD R3, R0
	POP R3
	MUL R0, R3
	ADD R3, R2
	LOAD -2(LB), R3
	CMP #null, R3
	BEQ nullDereferencement
	STORE R2, 1(R3)
fin.A.move:
; restore registers
	POP R2
	POP R3
	RTS
code.A.meh:
; Nothing stacked : can't have a stack overflow
; save registers
	WSTR "ok 2 / 2"
	WNL
fin.A.meh:
; restore registers
	RTS
heapFull:
	WSTR "ERROR : allocation failed because of full heap"
	WNL
	ERROR
stackOverflow:
	WSTR "ERROR : stack overflow"
	WNL
	ERROR
nullDereferencement:
	WSTR "ERROR : null dereferencement"
	WNL
	ERROR
; end main program
